type LookUpResponse = {
    status: "Completed" | "Pending" | "Initiated" | "Expired";
    refunded: false;
    pidx: string;
    total_amount: number;
    transaction_id: string;
    fee: number;
} | {
    status: "Refunded";
    refunded: true;
    pidx: string;
    total_amount: number;
    transaction_id: string;
    fee: number;
};
interface AmountBreakdown {
    label: string;
    amount: number;
}
interface ProductDetails {
    identity: string;
    name: string;
    total_price: number;
    quantity: number;
    unit_price: number;
}
type Mode = "Sandbox" | "Production";
interface ConstructorProps {
    /**
     * @param mode
     * - Sandbox or Production
     */
    mode: Mode;
    /**
     * @param secretKey
     * - Secret key provided by Khalti
     * - Secret key is different for Sandbox and Production
     */
    secretKey: string;
    /**
     * @param returnUrl
     * - URL where the user will be redirected after the transaction is completed
     * - must be a valid URL
     * @example
     * - https://merchant.com.np/cart
     */
    returnUrl: string;
    /**
     * @param websiteUrl
     * - URL of the merchant website
     * - must be a valid URL
     * @example
     * - https://merchant.com.np
     *
     */
    websiteUrl: string;
}
interface GetPaymentUrlProps {
    /**
     * @param amount
     * - Amount to be paid
     * - the amount should be in paisa and should be greater than 1 that is 100 paisa
     */
    amount: number;
    /**
     * @param purchase_order_id
     * - Unique identifier for order generated by the merchant
     */
    purchase_order_id: string;
    /**
     * @param purchase_order_name
     * - Order name
     */
    purchase_order_name: string;
    /**
     * @param customer_info
     * - details about the person who will be billed
     * @example
     * ```json
     *  "customer_info": {
        "name": "Niraj Acharya",
        "email": "hi@niraj.com.np",
        "phone": "9800000000"
       },
    ```
     */
    customer_info?: any;
    /**
     * @param amount_breakdown
     * - **n** length array of _label_ and _amount_ objects can be passed
     * @example
     * ```json
     *  "amount_breakdown": [
        {
            "label": "Actual Price",
            "amount": 1999
        },
        {
            "label": "VAT",
            "amount": 69
        },
        {
          "label":"Delivery Charge",
          "amount" : 100
        }
      ],
    ```
     */
    amount_breakdown?: AmountBreakdown[];
    /**
     * @param product_details
     * - product details
     * @example
     * ```json
     *  "product_details": [
        {
            "identity": "1234567890",
            "name": "Khalti logo",
            "total_price": 1300,
            "quantity": 1,
            "unit_price": 1300
        }
    ]
    ```
     */
    product_details?: ProductDetails[];
}
declare class Khalti {
    private _mode;
    private _secretKey;
    private _returnUrl;
    private _websiteUrl;
    private _apiEndPoints;
    /**
     * this sets the secret key
     * @param secretKey
     *
     */
    private _setSecretKey;
    /**
     *
     * @param returnUrl
     * - URL where the user will be redirected after the transaction is completed
     * - must be a valid URL
     * @param websiteUrl
     * - URL of the merchant website
     * - must be a valid URL
     */
    private _setUrls;
    getPaymentUrl(props: GetPaymentUrlProps): Promise<any>;
    /**
     *
     * @param url
     * - khalti payment api endpoint
     * @param data
     * - all required data aggregated
     */
    private _requestPaymentUrl;
    /**
     * @param pidx
     * - payment id of a transaction
     * @example
     * ```ts
     * const khalti = new Khalti({...})
     * await khalti.getPaymentStatus("HT6o6PEZRWFJ5ygavzHWd5")
     * ```
     */
    getPaymentStatus(pidx: string): Promise<LookUpResponse | null>;
    private _lookupRequest;
    constructor(props: ConstructorProps);
}

export { Khalti as default };
