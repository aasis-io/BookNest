{
  "version": 3,
  "sources": ["../../khalti-js/dist/index.mjs"],
  "sourcesContent": ["// index.ts\nvar Khalti = class {\n  _mode = \"Sandbox\";\n  _secretKey = \"\";\n  _returnUrl = \"\";\n  _websiteUrl = \"\";\n  _apiEndPoints = \"https://a.khalti.com/api/v2/\" /* Sandbox */;\n  /**\n   * this sets the secret key\n   * @param secretKey\n   *\n   */\n  _setSecretKey(secretKey) {\n    if (typeof secretKey === \"undefined\")\n      throw new Error(\"secret key is required\");\n    this._secretKey = secretKey;\n  }\n  /**\n   *\n   * @param returnUrl\n   * - URL where the user will be redirected after the transaction is completed\n   * - must be a valid URL\n   * @param websiteUrl\n   * - URL of the merchant website\n   * - must be a valid URL\n   */\n  _setUrls(returnUrl, websiteUrl) {\n    if (typeof returnUrl === \"undefined\")\n      throw new Error(\"redirect url is required\");\n    if (typeof websiteUrl === \"undefined\")\n      throw new Error(\"website url is required\");\n    this._returnUrl = returnUrl;\n    this._websiteUrl = websiteUrl;\n  }\n  getPaymentUrl(props) {\n    if (Object.keys(props || {}).length == 0)\n      throw new Error(\"All required parameters should be passed\");\n    if (typeof window !== \"undefined\")\n      throw new Error(\n        \"Cannot process this in client side, use server to avoid CORS.\"\n      );\n    const data = {\n      return_url: this._returnUrl,\n      website_url: this._websiteUrl,\n      ...props\n    };\n    return this._requestPaymentUrl(\n      this._apiEndPoints + \"epayment/initiate/\",\n      data\n    );\n  }\n  /**\n   *\n   * @param url\n   * - khalti payment api endpoint\n   * @param data\n   * - all required data aggregated\n   */\n  async _requestPaymentUrl(url, data) {\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Key ${this._secretKey}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      return await response.json();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /**\n   * @param pidx\n   * - payment id of a transaction\n   * @example\n   * ```ts\n   * const khalti = new Khalti({...})\n   * await khalti.getPaymentStatus(\"HT6o6PEZRWFJ5ygavzHWd5\")\n   * ```\n   */\n  getPaymentStatus(pidx) {\n    return this._lookupRequest(this._apiEndPoints + \"epayment/lookup/\", pidx);\n  }\n  async _lookupRequest(url, pidx) {\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify({ pidx }),\n        headers: {\n          Authorization: `Key ${this._secretKey}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n  constructor(props) {\n    if (!props)\n      return;\n    const { mode, secretKey, returnUrl, websiteUrl } = props;\n    if (typeof secretKey === \"undefined\")\n      throw new Error(\"khalti secret key is required\");\n    this._mode = mode;\n    this._setSecretKey(secretKey);\n    this._setUrls(returnUrl, websiteUrl);\n    if (this._mode === \"Sandbox\") {\n      this._apiEndPoints = \"https://a.khalti.com/api/v2/\" /* Sandbox */;\n    }\n    if (this._mode === \"Production\") {\n      this._apiEndPoints = \"https://khalti.com/api/v2/\" /* Production */;\n    }\n  }\n};\nexport {\n  Khalti as default\n};\n"],
  "mappings": ";;;;;AACA,IAAI,SAAS,MAAM;AAAA,EAoGjB,YAAY,OAAO;AAnGnB,iCAAQ;AACR,sCAAa;AACb,sCAAa;AACb,uCAAc;AACd,yCAAgB;AAgGd,QAAI,CAAC;AACH;AACF,UAAM,EAAE,MAAM,WAAW,WAAW,WAAW,IAAI;AACnD,QAAI,OAAO,cAAc;AACvB,YAAM,IAAI,MAAM,+BAA+B;AACjD,SAAK,QAAQ;AACb,SAAK,cAAc,SAAS;AAC5B,SAAK,SAAS,WAAW,UAAU;AACnC,QAAI,KAAK,UAAU,WAAW;AAC5B,WAAK,gBAAgB;AAAA,IACvB;AACA,QAAI,KAAK,UAAU,cAAc;AAC/B,WAAK,gBAAgB;AAAA,IACvB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAxGA,cAAc,WAAW;AACvB,QAAI,OAAO,cAAc;AACvB,YAAM,IAAI,MAAM,wBAAwB;AAC1C,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,SAAS,WAAW,YAAY;AAC9B,QAAI,OAAO,cAAc;AACvB,YAAM,IAAI,MAAM,0BAA0B;AAC5C,QAAI,OAAO,eAAe;AACxB,YAAM,IAAI,MAAM,yBAAyB;AAC3C,SAAK,aAAa;AAClB,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,cAAc,OAAO;AACnB,QAAI,OAAO,KAAK,SAAS,CAAC,CAAC,EAAE,UAAU;AACrC,YAAM,IAAI,MAAM,0CAA0C;AAC5D,QAAI,OAAO,WAAW;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AACF,UAAM,OAAO;AAAA,MACX,YAAY,KAAK;AAAA,MACjB,aAAa,KAAK;AAAA,MAClB,GAAG;AAAA,IACL;AACA,WAAO,KAAK;AAAA,MACV,KAAK,gBAAgB;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,mBAAmB,KAAK,MAAM;AAClC,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QAChC,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,eAAe,OAAO,KAAK,UAAU;AAAA,UACrC,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,IAAI;AAAA,MAC3B,CAAC;AACD,aAAO,MAAM,SAAS,KAAK;AAAA,IAC7B,SAAS,OAAO;AACd,cAAQ,IAAI,KAAK;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB,MAAM;AACrB,WAAO,KAAK,eAAe,KAAK,gBAAgB,oBAAoB,IAAI;AAAA,EAC1E;AAAA,EACA,MAAM,eAAe,KAAK,MAAM;AAC9B,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QAChC,QAAQ;AAAA,QACR,MAAM,KAAK,UAAU,EAAE,KAAK,CAAC;AAAA,QAC7B,SAAS;AAAA,UACP,eAAe,OAAO,KAAK,UAAU;AAAA,UACrC,gBAAgB;AAAA,QAClB;AAAA,MACF,CAAC;AACD,aAAO,MAAM,SAAS,KAAK;AAAA,IAC7B,SAAS,OAAO;AACd,cAAQ,IAAI,KAAK;AACjB,aAAO;AAAA,IACT;AAAA,EACF;AAiBF;",
  "names": []
}
